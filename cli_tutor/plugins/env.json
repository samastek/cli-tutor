{
  "command": "env",
  "description": "Display and modify environment variables - learn system environment",
  "category": "system",
  "tasks": [
    {
      "id": 1,
      "title": "Display All Environment Variables",
      "description": "Show all environment variables currently set in your system. What command lists all environment variables?",
      "command": "env",
      "difficulty": "beginner",
      "hints": [
        "The env command without arguments shows all environment variables",
        "Output shows VARIABLE=value format"
      ],
      "explanation": "The env command displays all environment variables and their values in the current shell environment."
    },
    {
      "id": 2,
      "title": "Search for Specific Variable",
      "description": "Find the PATH environment variable among all variables. How do you search environment variables?",
      "command": "env | grep PATH",
      "difficulty": "beginner",
      "hints": [
        "Pipe env output to grep to filter results",
        "Use grep to search for specific variable names"
      ],
      "explanation": "Piping env to grep allows you to search for specific environment variables by name or pattern."
    },
    {
      "id": 3,
      "title": "Run Command with Modified Environment",
      "description": "Run 'echo $USER' with USER set to 'testuser'. How do you temporarily modify environment for one command?",
      "command": "env USER=testuser echo $USER",
      "difficulty": "intermediate",
      "hints": [
        "Use env VARIABLE=value command to set temporary variables",
        "The variable only exists for that command execution"
      ],
      "explanation": "env can run commands with modified environment variables that only affect that single command."
    },
    {
      "id": 4,
      "title": "Run Command with Clean Environment",
      "description": "Execute 'printenv USER' with a completely clean environment. How do you clear all environment variables?",
      "command": "env -i printenv USER",
      "difficulty": "intermediate",
      "hints": [
        "Use '-i' flag to ignore/clear all environment variables",
        "Creates a minimal environment for the command"
      ],
      "explanation": "The '-i' option clears all environment variables, running the command in a minimal environment."
    },
    {
      "id": 5,
      "title": "Set Multiple Variables for Command",
      "description": "Run 'printenv' with both LANG=C and LC_ALL=C set. How do you set multiple environment variables?",
      "command": "env LANG=C LC_ALL=C printenv",
      "difficulty": "intermediate",
      "hints": [
        "List multiple VARIABLE=value pairs before the command",
        "All variables are set for the command execution"
      ],
      "explanation": "Multiple environment variables can be set by listing multiple VARIABLE=value pairs before the command."
    },
    {
      "id": 6,
      "title": "Remove Variable from Environment",
      "description": "Run a command with the HOME variable removed from environment. How do you unset variables temporarily?",
      "command": "env -u HOME printenv HOME",
      "difficulty": "intermediate",
      "hints": [
        "Use '-u VARIABLE' to unset/remove a variable",
        "The variable won't be available to the command"
      ],
      "explanation": "The '-u' option removes specific variables from the environment for the command execution."
    },
    {
      "id": 7,
      "title": "View Environment Sorted",
      "description": "Display all environment variables in alphabetical order. How do you sort environment output?",
      "command": "env | sort",
      "difficulty": "beginner",
      "hints": [
        "Pipe env output to sort command",
        "Sorts alphabetically by variable name"
      ],
      "explanation": "Piping env to sort displays environment variables in alphabetical order for easier browsing."
    },
    {
      "id": 8,
      "title": "Count Environment Variables",
      "description": "Count how many environment variables are currently set. How do you count env variables?",
      "command": "env | wc -l",
      "difficulty": "beginner",
      "hints": [
        "Pipe env output to wc -l to count lines",
        "Each line represents one environment variable"
      ],
      "explanation": "Counting lines in env output gives you the total number of environment variables set."
    },
    {
      "id": 9,
      "title": "Show Only Variable Names",
      "description": "Display only the names of environment variables, not their values. How do you extract just variable names?",
      "command": "env | cut -d= -f1",
      "difficulty": "intermediate",
      "hints": [
        "Use cut with '=' as delimiter",
        "Take first field (-f1) to get variable names"
      ],
      "explanation": "Using cut with '=' as delimiter extracts just the variable names from env output."
    },
    {
      "id": 10,
      "title": "Find Variables Containing Path",
      "description": "Find all environment variables that contain the word 'path' (case-insensitive). How do you search variable content?",
      "command": "env | grep -i path",
      "difficulty": "intermediate",
      "hints": [
        "Use grep -i for case-insensitive search",
        "Searches both variable names and values"
      ],
      "explanation": "grep -i searches both variable names and values for the specified pattern, ignoring case."
    },
    {
      "id": 11,
      "title": "Run Shell with Clean Environment",
      "description": "Start a new bash shell with only specific variables (PATH and HOME). How do you create minimal environments?",
      "command": "env -i PATH=$PATH HOME=$HOME bash",
      "difficulty": "advanced",
      "hints": [
        "Use -i to clear all, then set only needed variables",
        "Specify the shell command to run"
      ],
      "explanation": "Combining -i with specific variable assignments creates a minimal environment with only essential variables."
    },
    {
      "id": 12,
      "title": "Compare Environments",
      "description": "Compare current environment with a clean environment. How do you see environment differences?",
      "command": "diff <(env | sort) <(env -i env | sort)",
      "difficulty": "advanced",
      "hints": [
        "Use process substitution <() to compare command outputs",
        "Sort both environments for meaningful comparison"
      ],
      "explanation": "Process substitution with diff shows differences between current and clean environments."
    },
    {
      "id": 13,
      "title": "Set PATH for Command",
      "description": "Run 'which python' with a custom PATH that includes '/usr/local/bin'. How do you override PATH temporarily?",
      "command": "env PATH=/usr/local/bin:/usr/bin:/bin which python",
      "difficulty": "intermediate",
      "hints": [
        "Set PATH to custom value before the command",
        "Include necessary directories separated by colons"
      ],
      "explanation": "Temporarily overriding PATH affects where the system looks for commands during that execution."
    },
    {
      "id": 14,
      "title": "Debug Environment Issues",
      "description": "Run a program with verbose environment debugging. How do you debug environment problems?",
      "command": "env -v MYVAR=test myprogram",
      "difficulty": "advanced",
      "hints": [
        "Use -v for verbose output showing what env is doing",
        "Helps debug environment-related issues"
      ],
      "explanation": "The -v option provides verbose output showing how env is modifying the environment for debugging."
    },
    {
      "id": 15,
      "title": "Export Variables from File with env",
      "description": "Use env to run a command with variables loaded from a file. How do you load environment from files?",
      "command": "env $(cat .env | xargs) mycommand",
      "difficulty": "advanced",
      "hints": [
        "Use command substitution with cat and xargs",
        "File should contain VARIABLE=value lines"
      ],
      "explanation": "Loading variables from files with env allows consistent environment setup from configuration files."
    },
    {
      "id": 16,
      "title": "Check if Variable Exists",
      "description": "Use env to check if DISPLAY variable is set without showing all variables. How do you test for specific variables?",
      "command": "env | grep '^DISPLAY='",
      "difficulty": "intermediate",
      "hints": [
        "Use grep with ^ to match start of line",
        "This ensures exact variable name match"
      ],
      "explanation": "Using grep with ^ anchor ensures you match the exact variable name, not partial matches in values."
    },
    {
      "id": 17,
      "title": "Run Command Ignoring Specific Variables",
      "description": "Execute a program while ignoring both LANG and LC_ALL variables. How do you exclude multiple variables?",
      "command": "env -u LANG -u LC_ALL myprogram",
      "difficulty": "intermediate",
      "hints": [
        "Use multiple -u flags for multiple variables",
        "Each -u removes one variable from the environment"
      ],
      "explanation": "Multiple -u flags can be used to remove several specific variables from the command environment."
    },
    {
      "id": 18,
      "title": "Simulate Different User Environment",
      "description": "Run a command simulating another user's basic environment variables. How do you simulate user environments?",
      "command": "env -i HOME=/home/otheruser USER=otheruser PATH=/usr/bin:/bin bash",
      "difficulty": "advanced",
      "hints": [
        "Use -i for clean environment, then set user-specific variables",
        "Include HOME, USER, and basic PATH"
      ],
      "explanation": "Simulating user environments helps test how programs behave under different user contexts and permissions."
    }
  ]
}