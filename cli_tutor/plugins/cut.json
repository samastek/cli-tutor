{
  "command": "cut",
  "description": "Remove sections from each line of files - extract specific columns or characters",
  "category": "text_processing",
  "tasks": [
    {
      "id": 1,
      "title": "Extract Character Range",
      "description": "Extract characters 1-5 from each line. What option specifies character positions?",
      "command": "cut -c 1-5 file.txt",
      "difficulty": "beginner",
      "hints": [
        "Use -c for character positions",
        "Range format: start-end",
        "Character positions start at 1"
      ],
      "explanation": "The -c option extracts specific character positions. '1-5' extracts characters 1 through 5 from each line."
    },
    {
      "id": 2,
      "title": "Extract Specific Fields",
      "description": "Extract the 2nd and 4th fields from tab-delimited data. What option extracts fields?",
      "command": "cut -f 2,4 data.txt",
      "difficulty": "beginner",
      "hints": [
        "Use -f for field extraction",
        "Comma separates multiple field numbers",
        "Default delimiter is tab"
      ],
      "explanation": "The -f option extracts fields by number. '2,4' extracts the 2nd and 4th fields from tab-delimited input."
    },
    {
      "id": 3,
      "title": "Custom Field Delimiter",
      "description": "Extract the 1st and 3rd fields from comma-separated values. How do you specify a custom delimiter?",
      "command": "cut -d',' -f 1,3 data.csv",
      "difficulty": "beginner",
      "hints": [
        "Use -d to specify delimiter",
        "Put delimiter in quotes",
        "Combine with -f for field extraction"
      ],
      "explanation": "The -d option sets the field delimiter. '-d',' changes from tab to comma, then -f extracts specified fields."
    },
    {
      "id": 4,
      "title": "Extract Field Range", 
      "description": "Extract fields 2 through 5 from colon-delimited data. How do you specify field ranges?",
      "command": "cut -d':' -f 2-5 /etc/passwd",
      "difficulty": "intermediate",
      "hints": [
        "Use hyphen for ranges: start-end",
        "Works with both -c and -f options",
        "Extracts all fields in the range"
      ],
      "explanation": "Field ranges use hyphen notation. '-f 2-5' extracts fields 2, 3, 4, and 5 from the input."
    },
    {
      "id": 5,
      "title": "Extract from Start to Position",
      "description": "Extract characters from beginning up to position 10. How do you extract from start?",
      "command": "cut -c -10 file.txt",
      "difficulty": "intermediate",
      "hints": [
        "Use -position for 'from start to position'",
        "Omit the starting number",
        "Includes the specified position"
      ],
      "explanation": "Using '-10' means 'from start to position 10'. This extracts characters 1 through 10."
    },
    {
      "id": 6,
      "title": "Extract from Position to End",
      "description": "Extract characters from position 5 to end of line. How do you extract to the end?",
      "command": "cut -c 5- file.txt",
      "difficulty": "intermediate",
      "hints": [
        "Use position- for 'from position to end'",
        "Omit the ending number",
        "Includes all remaining characters"
      ],
      "explanation": "Using '5-' means 'from position 5 to end'. This extracts from character 5 to the end of each line."
    },
    {
      "id": 7,
      "title": "Multiple Character Ranges",
      "description": "Extract characters 1-3 and 8-12 from each line. How do you specify multiple ranges?",
      "command": "cut -c 1-3,8-12 file.txt",
      "difficulty": "intermediate",
      "hints": [
        "Separate ranges with commas",
        "No spaces between ranges",
        "Order doesn't matter"
      ],
      "explanation": "Multiple ranges are separated by commas. '1-3,8-12' extracts characters 1-3 and 8-12 from each line."
    },
    {
      "id": 8,
      "title": "Extract Single Characters",
      "description": "Extract the 1st, 5th, and 10th characters. How do you extract individual characters?",
      "command": "cut -c 1,5,10 file.txt",
      "difficulty": "beginner",
      "hints": [
        "List individual positions separated by commas",
        "Each number represents one character",
        "Can mix individual positions with ranges"
      ],
      "explanation": "Individual character positions are listed with commas. '1,5,10' extracts just those three characters."
    },
    {
      "id": 9,
      "title": "Suppress Lines Without Delimiter",
      "description": "Only output lines that contain the delimiter character. What option suppresses lines without delimiters?",
      "command": "cut -d',' -f 2 -s data.txt",
      "difficulty": "advanced",
      "hints": [
        "Use -s to suppress lines without delimiters",
        "Only affects field extraction (-f)",
        "Lines without delimiter are not printed"
      ],
      "explanation": "The -s option suppresses lines that don't contain the field delimiter, useful for filtering structured data."
    },
    {
      "id": 10,
      "title": "Output Only Delimiter",
      "description": "Change output delimiter to pipe '|' instead of the input delimiter. How do you change output delimiter?",
      "command": "cut -d',' -f 1,2,3 --output-delimiter='|' data.csv",
      "difficulty": "advanced",
      "hints": [
        "Use --output-delimiter to change output separator",
        "Input and output delimiters can be different",
        "Useful for format conversion"
      ],
      "explanation": "The --output-delimiter option changes how fields are separated in output, allowing format conversion."
    },
    {
      "id": 11,
      "title": "Extract Username from /etc/passwd",
      "description": "Extract usernames (1st field) from /etc/passwd file. What's the practical command?",
      "command": "cut -d':' -f 1 /etc/passwd",
      "difficulty": "intermediate",
      "hints": [
        "/etc/passwd uses colon as delimiter",
        "Username is the first field",
        "Real-world example of field extraction"
      ],
      "explanation": "This practical example extracts usernames from the system password file, which uses colon-delimited fields."
    },
    {
      "id": 12,
      "title": "Process Multiple Files",
      "description": "Extract the 2nd field from multiple CSV files. How do you process multiple files?",
      "command": "cut -d',' -f 2 file1.csv file2.csv file3.csv",
      "difficulty": "intermediate",
      "hints": [
        "List multiple files after options",
        "Each file processed independently",
        "Output is concatenated"
      ],
      "explanation": "cut can process multiple files by listing them. Each file is processed with the same options."
    },
    {
      "id": 13,
      "title": "Cut with Byte Positions",
      "description": "Extract bytes 1-10 from each line (useful for binary data). What option works with bytes?",
      "command": "cut -b 1-10 file.txt",
      "difficulty": "advanced",
      "hints": [
        "Use -b for byte positions",
        "Similar to -c but for bytes",
        "Important for multibyte characters"
      ],
      "explanation": "The -b option extracts byte positions, which differs from character positions with multibyte characters."
    },
    {
      "id": 14,
      "title": "Combine with Other Commands",
      "description": "Get process names from 'ps aux' output. How do you combine cut with other commands?",
      "command": "ps aux | cut -c 65-",
      "difficulty": "advanced",
      "hints": [
        "Use pipes to combine commands",
        "cut works on any input stream",
        "Position 65- gets the command name from ps"
      ],
      "explanation": "cut works in pipelines, processing output from other commands. Here it extracts process names from ps output."
    },
    {
      "id": 15,
      "title": "Extract File Extensions",
      "description": "Extract file extensions from a list of filenames with periods as delimiter. What's the command?",
      "command": "cut -d'.' -f 2- filenames.txt",
      "difficulty": "intermediate",
      "hints": [
        "Use period as delimiter",
        "Extract from field 2 to end",
        "Handles multiple dots in filenames"
      ],
      "explanation": "Using '.' as delimiter and extracting 'f 2-' gets everything after the first dot, capturing file extensions."
    }
  ]
}