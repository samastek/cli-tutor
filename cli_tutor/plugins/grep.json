{
  "command": "grep",
  "description": "Search text patterns in files - learn text searching and filtering",
  "category": "text_processing",
  "tasks": [
    {
      "id": 1,
      "title": "Basic Text Search",
      "description": "Search for the word 'error' in a file called 'log.txt'. What command would you use?",
      "command": "grep error log.txt",
      "difficulty": "beginner",
      "hints": [
        "grep syntax: grep [pattern] [file]",
        "The pattern 'error' should come before the filename"
      ],
      "explanation": "Basic grep syntax is 'grep pattern filename'. This searches for 'error' in log.txt."
    },
    {
      "id": 2,
      "title": "Case Insensitive Search",
      "description": "Search for 'ERROR' in log.txt, but ignore case (match 'error', 'Error', 'ERROR', etc.). What option makes grep case-insensitive?",
      "command": "grep -i ERROR log.txt",
      "difficulty": "beginner",
      "hints": [
        "Use the '-i' option for case-insensitive search",
        "This will match 'error', 'Error', 'ERROR', etc."
      ],
      "explanation": "The '-i' option makes grep ignore case when matching patterns."
    },
    {
      "id": 3,
      "title": "Show Line Numbers",
      "description": "Search for 'warning' in log.txt and show the line numbers where matches occur. What option shows line numbers?",
      "command": "grep -n warning log.txt",
      "difficulty": "beginner",
      "hints": [
        "Use the '-n' option to show line numbers",
        "This prefixes each match with its line number"
      ],
      "explanation": "The '-n' option displays line numbers alongside matching lines."
    },
    {
      "id": 4,
      "title": "Count Matches",
      "description": "Count how many lines contain 'error' in log.txt without showing the actual lines. What option counts matches?",
      "command": "grep -c error log.txt",
      "difficulty": "intermediate",
      "hints": [
        "Use the '-c' option to count matches",
        "This shows only the number of matching lines"
      ],
      "explanation": "The '-c' option counts and displays the number of matching lines instead of the lines themselves."
    },
    {
      "id": 5,
      "title": "Invert Match",
      "description": "Show all lines in log.txt that do NOT contain 'debug'. What option inverts the match?",
      "command": "grep -v debug log.txt",
      "difficulty": "intermediate",
      "hints": [
        "Use the '-v' option to invert the match",
        "This shows lines that don't contain the pattern"
      ],
      "explanation": "The '-v' option inverts the match, showing lines that don't contain the specified pattern."
    },
    {
      "id": 6,
      "title": "Search Multiple Files",
      "description": "Search for 'config' in all .txt files in the current directory. How do you search multiple files?",
      "command": "grep config *.txt",
      "difficulty": "intermediate",
      "hints": [
        "Use wildcards like *.txt to match multiple files",
        "The * matches any filename ending in .txt"
      ],
      "explanation": "You can use wildcards to search multiple files. *.txt matches all files ending in .txt."
    },
    {
      "id": 7,
      "title": "Recursive Search",
      "description": "Search for 'TODO' in all files in the current directory and all subdirectories. What option enables recursive search?",
      "command": "grep -r TODO .",
      "difficulty": "advanced",
      "hints": [
        "Use the '-r' option for recursive search",
        "Use '.' to represent the current directory"
      ],
      "explanation": "The '-r' option searches recursively through directories. '.' represents the current directory."
    },
    {
      "id": 8,
      "title": "Show Context Lines",
      "description": "Search for 'exception' in log.txt and show 2 lines before and after each match for context. What option shows context?",
      "command": "grep -C 2 exception log.txt",
      "difficulty": "advanced",
      "hints": [
        "Use '-C' followed by a number for context lines",
        "-C 2 shows 2 lines before and after each match"
      ],
      "explanation": "The '-C' option shows context lines around matches. -C 2 shows 2 lines before and after each match."
    },
    {
      "id": 9,
      "title": "Word Boundary Search",
      "description": "Search for the whole word 'log' in file.txt (not 'login' or 'catalog'). What option matches whole words only?",
      "command": "grep -w log file.txt",
      "difficulty": "intermediate",
      "hints": [
        "Use the '-w' option for whole word matching",
        "This ensures 'log' doesn't match within 'login' or 'catalog'"
      ],
      "explanation": "The '-w' option matches whole words only, using word boundaries to prevent partial matches."
    },
    {
      "id": 10,
      "title": "Show Only Matching Part",
      "description": "Show only the matching parts of lines containing 'http://[^ ]*' pattern in urls.txt, not the entire lines. What option shows only matches?",
      "command": "grep -o 'http://[^ ]*' urls.txt",
      "difficulty": "advanced",
      "hints": [
        "Use the '-o' option to show only matching parts",
        "This extracts just the URLs, not entire lines"
      ],
      "explanation": "The '-o' option prints only the matching parts of lines, useful for extracting specific data."
    },
    {
      "id": 11,
      "title": "Multiple Patterns with OR",
      "description": "Search for lines containing either 'error' OR 'warning' in log.txt using a single grep command. Use extended regex for this.",
      "command": "grep -E 'error|warning' log.txt",
      "difficulty": "intermediate",
      "hints": [
        "Use '-E' for extended regular expressions",
        "The pipe '|' means OR in extended regex"
      ],
      "explanation": "The '-E' option enables extended regex where '|' acts as OR operator between patterns."
    },
    {
      "id": 12,
      "title": "Show Filename Only",
      "description": "Find which files in the current directory contain 'password' but show only the filenames, not the matching lines. What option shows only filenames?",
      "command": "grep -l password *",
      "difficulty": "intermediate",
      "hints": [
        "Use the '-l' option to list only filenames",
        "This suppresses normal output and shows only names of files with matches"
      ],
      "explanation": "The '-l' option lists only the names of files containing matches, not the matching lines themselves."
    },
    {
      "id": 13,
      "title": "Quiet Mode Check",
      "description": "Check if 'connection established' exists in server.log without any output, just exit status. What option runs grep quietly?",
      "command": "grep -q 'connection established' server.log",
      "difficulty": "advanced",
      "hints": [
        "Use the '-q' option for quiet mode",
        "This returns exit status 0 if found, 1 if not found"
      ],
      "explanation": "The '-q' option runs grep quietly, useful in scripts to check existence without output."
    },
    {
      "id": 14,
      "title": "Fixed String Search",
      "description": "Search for the literal string 'user.name' in config.txt (the dot should not be treated as regex). What option treats pattern as fixed string?",
      "command": "grep -F user.name config.txt",
      "difficulty": "intermediate",
      "hints": [
        "Use the '-F' option for fixed string matching",
        "This treats special regex characters as literals"
      ],
      "explanation": "The '-F' option treats the pattern as a fixed string, not a regex, so dots and other special characters are literal."
    },
    {
      "id": 15,
      "title": "Show Lines After Match",
      "description": "Search for 'START' in process.log and show 3 lines after each match to see what happens next. What option shows lines after?",
      "command": "grep -A 3 START process.log",
      "difficulty": "intermediate",
      "hints": [
        "Use '-A' followed by number for lines after",
        "-A 3 shows 3 lines after each match"
      ],
      "explanation": "The '-A' option shows lines After matches. -A 3 displays 3 lines following each match."
    },
    {
      "id": 16,
      "title": "Show Lines Before Match",
      "description": "Find 'FAILED' in build.log and show 5 lines before each match to see what led to failure. What option shows lines before?",
      "command": "grep -B 5 FAILED build.log",
      "difficulty": "intermediate",
      "hints": [
        "Use '-B' followed by number for lines before",
        "-B 5 shows 5 lines before each match"
      ],
      "explanation": "The '-B' option shows lines Before matches. -B 5 displays 5 lines preceding each match."
    },
    {
      "id": 17,
      "title": "Exclude Files by Pattern",
      "description": "Search for 'TODO' recursively in current directory but exclude all .git directories. How do you exclude directories?",
      "command": "grep -r --exclude-dir=.git TODO .",
      "difficulty": "advanced",
      "hints": [
        "Use '--exclude-dir' to skip specific directories",
        "This is essential when searching code repositories"
      ],
      "explanation": "The '--exclude-dir' option skips specified directories during recursive search, crucial for avoiding version control folders."
    },
    {
      "id": 18,
      "title": "Include Only Specific Files",
      "description": "Search for 'import' recursively but only in Python files (*.py). How do you include only specific file patterns?",
      "command": "grep -r --include='*.py' import .",
      "difficulty": "advanced",
      "hints": [
        "Use '--include' to search only specific file patterns",
        "Quote the pattern to prevent shell expansion"
      ],
      "explanation": "The '--include' option limits search to files matching the specified pattern, useful for language-specific searches."
    },
    {
      "id": 19,
      "title": "Line Beginning Pattern",
      "description": "Find all lines that start with 'ERROR:' in app.log. How do you match pattern at line beginning?",
      "command": "grep '^ERROR:' app.log",
      "difficulty": "intermediate",
      "hints": [
        "Use '^' to match start of line",
        "'^ERROR:' matches 'ERROR:' only at line beginning"
      ],
      "explanation": "The '^' anchor matches the start of a line, ensuring the pattern only matches at the beginning."
    },
    {
      "id": 20,
      "title": "Line Ending Pattern",
      "description": "Find all lines that end with ';' in script.js. How do you match pattern at line ending?",
      "command": "grep ';$' script.js",
      "difficulty": "intermediate",
      "hints": [
        "Use '$' to match end of line",
        "';$' matches ';' only at line ending"
      ],
      "explanation": "The '$' anchor matches the end of a line, ensuring the pattern only matches at the end."
    },
    {
      "id": 21,
      "title": "Character Class Search",
      "description": "Find all lines containing years from 2020-2029 in report.txt. Use character classes to match this range.",
      "command": "grep '202[0-9]' report.txt",
      "difficulty": "intermediate",
      "hints": [
        "Use [0-9] to match any digit",
        "'202[0-9]' matches 2020 through 2029"
      ],
      "explanation": "Character classes like [0-9] match any character in the range, useful for pattern variations."
    },
    {
      "id": 22,
      "title": "Multiple File Types",
      "description": "Search for 'function' in all .js and .ts files in current directory. How do you search multiple file patterns?",
      "command": "grep function *.js *.ts",
      "difficulty": "intermediate",
      "hints": [
        "List multiple patterns separated by spaces",
        "Shell expands *.js *.ts to all matching files"
      ],
      "explanation": "You can specify multiple file patterns, and the shell will expand them to include all matching files."
    },
    {
      "id": 23,
      "title": "Max Count Limit",
      "description": "Find 'user' in large.log but stop after finding 5 matches to save time. What option limits match count?",
      "command": "grep -m 5 user large.log",
      "difficulty": "advanced",
      "hints": [
        "Use '-m' followed by max count",
        "-m 5 stops after 5 matches"
      ],
      "explanation": "The '-m' option limits the maximum number of matches, useful for large files when you only need a few examples."
    },
    {
      "id": 24,
      "title": "Binary File Handling",
      "description": "Search for 'version' in all files including binaries, treating binary files as text. What option forces text mode?",
      "command": "grep -a version *",
      "difficulty": "advanced",
      "hints": [
        "Use '-a' to treat binary files as text",
        "Useful when searching mixed file types"
      ],
      "explanation": "The '-a' option treats binary files as text, allowing grep to search them instead of skipping."
    },
    {
      "id": 25,
      "title": "Null Separator Output",
      "description": "List files containing 'secret' with null character separation for safe processing with xargs. What option uses null separator?",
      "command": "grep -l -Z secret *",
      "difficulty": "advanced",
      "hints": [
        "Use '-Z' for null-separated output",
        "This handles filenames with spaces safely"
      ],
      "explanation": "The '-Z' option separates output with null characters, crucial for handling filenames with spaces in scripts."
    },
    {
      "id": 26,
      "title": "Color Highlight Matches",
      "description": "Search for 'WARNING' in system.log with colored highlighting of matches. What option enables color?",
      "command": "grep --color=auto WARNING system.log",
      "difficulty": "beginner",
      "hints": [
        "Use '--color=auto' for colored output",
        "This highlights matches in terminal"
      ],
      "explanation": "The '--color' option highlights matches, with 'auto' enabling color only for terminal output."
    },
    {
      "id": 27,
      "title": "Extended Regex Quantifiers",
      "description": "Find lines with IP addresses (simplified: 3 digits, dot, repeated 3 times, then 3 digits) in network.log using extended regex.",
      "command": "grep -E '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}' network.log",
      "difficulty": "advanced",
      "hints": [
        "Use '-E' for extended regex with {n,m} quantifiers",
        "{1,3} matches 1 to 3 occurrences"
      ],
      "explanation": "Extended regex with '-E' supports {n,m} quantifiers for precise repetition control."
    },
    {
      "id": 28,
      "title": "Case Insensitive File Search",
      "description": "Recursively find all files containing 'LICENSE' (case-insensitive) and show both filename and line number. Combine multiple options.",
      "command": "grep -r -i -n LICENSE .",
      "difficulty": "intermediate",
      "hints": [
        "Combine -r (recursive), -i (case-insensitive), -n (line numbers)",
        "Options can be combined or separate"
      ],
      "explanation": "Multiple options can be combined to create powerful searches. This finds all license references regardless of case."
    },
    {
      "id": 29,
      "title": "Perl Regex Mode",
      "description": "Find email addresses using Perl-compatible regex in contacts.txt. Match pattern: word@word.word",
      "command": "grep -P '\\w+@\\w+\\.\\w+' contacts.txt",
      "difficulty": "advanced",
      "hints": [
        "Use '-P' for Perl-compatible regex",
        "\\w matches word characters in Perl regex"
      ],
      "explanation": "The '-P' option enables Perl-compatible regex, providing advanced features like \\w for word characters."
    },
    {
      "id": 30,
      "title": "Files Without Matches",
      "description": "Find all .conf files that do NOT contain 'enabled' to identify disabled configurations. What option lists non-matching files?",
      "command": "grep -L enabled *.conf",
      "difficulty": "advanced",
      "hints": [
        "Use '-L' to list files without matches",
        "Opposite of '-l' which shows files with matches"
      ],
      "explanation": "The '-L' option lists files that don't contain matches, useful for finding files missing required content."
    }
  ]
}